
import { useState } from "react";
import { Send, Mic, Paperclip, Download } from "lucide-react";
import { Button } from "@/components/ui/button";
import { sendMessageToGemini } from "@/services/geminiApi";
import { generateImage } from "@/services/imageService";
import { generateFile, downloadFile } from "@/services/fileService";
import MessageRenderer from "./MessageRenderer";
import PhotoSelector from "./PhotoSelector";
import TextEditor from "./TextEditor";

const ChatArea = () => {
  const [message, setMessage] = useState("");
  const [messages, setMessages] = useState<Array<{id: number, text: string, sender: 'user' | 'ai', imageUrl?: string, fileUrl?: string, fileName?: string}>>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [useTextEditor, setUseTextEditor] = useState(false);

  const handleSendMessage = async () => {
    if (!message.trim()) return;
    
    console.log('Sending message:', message);
    
    const newMessage = {
      id: Date.now(),
      text: message,
      sender: 'user' as const
    };
    
    setMessages(prev => [...prev, newMessage]);
    const currentMessage = message;
    setMessage("");
    setIsLoading(true);
    
    try {
      // Check if user wants to generate a file
      if (currentMessage.toLowerCase().includes('create file') || 
          currentMessage.toLowerCase().includes('generate file') ||
          currentMessage.toLowerCase().includes('make a file')) {
        
        await handleFileGeneration(currentMessage);
        return;
      }
      
      const aiResponse = await sendMessageToGemini(currentMessage);
      
      const aiMessage = {
        id: Date.now() + 1,
        text: aiResponse,
        sender: 'ai' as const
      };
      
      setMessages(prev => [...prev, aiMessage]);
      console.log('AI response received:', aiResponse);
      
    } catch (error) {
      console.error('Error getting AI response:', error);
      
      const errorMessage = {
        id: Date.now() + 1,
        text: `Sorry, I encountered an error: ${error instanceof Error ? error.message : 'Unknown error'}. Please check your connection and try again.`,
        sender: 'ai' as const
      };
      
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleFileGeneration = async (prompt: string) => {
    try {
      console.log('Generating file for prompt:', prompt);
      
      // Determine file type and content based on prompt
      let fileType: 'txt' | 'json' | 'html' | 'js' | 'css' = 'txt';
      let content = '';
      let filename = '';
      
      const lowerPrompt = prompt.toLowerCase();
      
      if (lowerPrompt.includes('json')) {
        fileType = 'json';
        content = JSON.stringify({ message: "Hello from CrazeGPT!", created: new Date().toISOString() }, null, 2);
        filename = 'crazegpt-data.json';
      } else if (lowerPrompt.includes('html')) {
        fileType = 'html';
        content = `<!DOCTYPE html>
<html>
<head>
    <title>Generated by CrazeGPT</title>
</head>
<body>
    <h1>Hello from CrazeGPT!</h1>
    <p>This file was generated by CrazeGPT, created by CraftingCrazeGaming.</p>
</body>
</html>`;
        filename = 'crazegpt-page.html';
      } else {
        content = `Hello! This file was generated by CrazeGPT.

Created by: CraftingCrazeGaming
Generated on: ${new Date().toLocaleString()}
Prompt: ${prompt}

CrazeGPT is based on Gemini AI and can help you with:
- Text formatting and editing
- Image generation
- File creation
- And much more!`;
        filename = 'crazegpt-file.txt';
      }
      
      const generatedFile = await generateFile({ type: fileType, content, filename });
      
      const fileMessage = {
        id: Date.now() + 1,
        text: `I've generated a ${fileType.toUpperCase()} file for you! Click the download button to save it.`,
        sender: 'ai' as const,
        fileUrl: generatedFile.url,
        fileName: generatedFile.filename
      };
      
      setMessages(prev => [...prev, fileMessage]);
      console.log('File generated successfully');
      
    } catch (error) {
      console.error('Error generating file:', error);
      const errorMessage = {
        id: Date.now() + 1,
        text: 'Sorry, I had trouble generating that file. Please try again.',
        sender: 'ai' as const
      };
      setMessages(prev => [...prev, errorMessage]);
    }
  };

  const handleImageSelect = (imageUrl: string) => {
    console.log('Image selected:', imageUrl);
    const imageMessage = {
      id: Date.now(),
      text: "Here's the image you selected:",
      sender: 'user' as const,
      imageUrl
    };
    setMessages(prev => [...prev, imageMessage]);
  };

  const handleImageGenerate = async (prompt: string) => {
    setIsLoading(true);
    try {
      console.log('Generating image with AI for prompt:', prompt);
      const generatedImage = await generateImage({ prompt });
      const imageMessage = {
        id: Date.now(),
        text: `Generated image: "${prompt}"`,
        sender: 'ai' as const,
        imageUrl: generatedImage.url
      };
      setMessages(prev => [...prev, imageMessage]);
      console.log('Image generated successfully');
    } catch (error) {
      console.error('Error generating image:', error);
      const errorMessage = {
        id: Date.now(),
        text: 'Sorry, I had trouble generating that image. Please try again.',
        sender: 'ai' as const
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="flex-1 flex flex-col bg-gradient-to-br from-slate-50 to-blue-50">
      {/* Chat Messages */}
      <div className="flex-1 overflow-y-auto">
        {messages.length === 0 ? (
          // Welcome Screen - Enhanced
          <div className="flex items-center justify-center h-full p-6">
            <div className="text-center max-w-4xl mx-auto">
              <div className="mb-8">
                <div className="w-20 h-20 bg-gradient-to-br from-blue-600 via-purple-600 to-indigo-700 rounded-full flex items-center justify-center mx-auto mb-6 shadow-lg">
                  <span className="text-white text-3xl font-bold">C</span>
                </div>
                <h1 className="text-5xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-4">
                  Welcome to CrazeGPT
                </h1>
                <p className="text-gray-600 text-xl mb-2">
                  Your Professional AI Assistant
                </p>
                <p className="text-gray-500 text-lg">
                  Created by **CraftingCrazeGaming** ‚Ä¢ Powered by Gemini AI
                </p>
              </div>
              
              {/* Enhanced Feature Cards */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                <div className="bg-white/80 backdrop-blur-sm hover:bg-white rounded-xl p-6 cursor-pointer transition-all duration-300 border border-gray-200 shadow-sm hover:shadow-md">
                  <div className="text-4xl mb-4">‚ú®</div>
                  <h3 className="font-semibold text-gray-900 mb-2">Rich Text Formatting</h3>
                  <p className="text-gray-600 text-sm">Create **bold**, *italic*, and `code` formatted text</p>
                </div>
                <div className="bg-white/80 backdrop-blur-sm hover:bg-white rounded-xl p-6 cursor-pointer transition-all duration-300 border border-gray-200 shadow-sm hover:shadow-md">
                  <div className="text-4xl mb-4">üñºÔ∏è</div>
                  <h3 className="font-semibold text-gray-900 mb-2">Image Generation</h3>
                  <p className="text-gray-600 text-sm">Generate and upload images with AI</p>
                </div>
                <div className="bg-white/80 backdrop-blur-sm hover:bg-white rounded-xl p-6 cursor-pointer transition-all duration-300 border border-gray-200 shadow-sm hover:shadow-md">
                  <div className="text-4xl mb-4">üìÅ</div>
                  <h3 className="font-semibold text-gray-900 mb-2">File Creation</h3>
                  <p className="text-gray-600 text-sm">Generate ZIP, JSON, HTML, and other files</p>
                </div>
                <div className="bg-white/80 backdrop-blur-sm hover:bg-white rounded-xl p-6 cursor-pointer transition-all duration-300 border border-gray-200 shadow-sm hover:shadow-md">
                  <div className="text-4xl mb-4">‚úçÔ∏è</div>
                  <h3 className="font-semibold text-gray-900 mb-2">Advanced Text Editor</h3>
                  <p className="text-gray-600 text-sm">Rich text editing with AI enhancement</p>
                </div>
                <div className="bg-white/80 backdrop-blur-sm hover:bg-white rounded-xl p-6 cursor-pointer transition-all duration-300 border border-gray-200 shadow-sm hover:shadow-md">
                  <div className="text-4xl mb-4">üß†</div>
                  <h3 className="font-semibold text-gray-900 mb-2">Intelligent Responses</h3>
                  <p className="text-gray-600 text-sm">Powered by advanced AI technology</p>
                </div>
                <div className="bg-white/80 backdrop-blur-sm hover:bg-white rounded-xl p-6 cursor-pointer transition-all duration-300 border border-gray-200 shadow-sm hover:shadow-md">
                  <div className="text-4xl mb-4">‚ö°</div>
                  <h3 className="font-semibold text-gray-900 mb-2">Lightning Fast</h3>
                  <p className="text-gray-600 text-sm">Quick responses and seamless experience</p>
                </div>
              </div>
              
              <div className="bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-2xl p-6 shadow-lg">
                <h2 className="text-xl font-semibold mb-2">Try asking me:</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm">
                  <p>"Who created you?"</p>
                  <p>"Generate an image of a sunset"</p>
                  <p>"Create a JSON file"</p>
                  <p>"Help me format text"</p>
                </div>
              </div>
            </div>
          </div>
        ) : (
          // Messages
          <div className="max-w-4xl mx-auto px-6 py-8 space-y-6">
            {messages.map((msg) => (
              <div key={msg.id} className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
                <div className="max-w-3xl">
                  <MessageRenderer content={msg.text} sender={msg.sender} />
                  {msg.imageUrl && (
                    <div className="mt-3">
                      <img 
                        src={msg.imageUrl} 
                        alt="Generated or uploaded image" 
                        className="max-w-sm rounded-lg shadow-md border"
                        onError={(e) => {
                          console.error('Image failed to load:', msg.imageUrl);
                          e.currentTarget.style.display = 'none';
                        }}
                      />
                    </div>
                  )}
                  {msg.fileUrl && msg.fileName && (
                    <div className="mt-3">
                      <Button
                        onClick={() => downloadFile(msg.fileUrl!, msg.fileName!)}
                        className="bg-green-600 hover:bg-green-700 text-white"
                        size="sm"
                      >
                        <Download className="w-4 h-4 mr-2" />
                        Download {msg.fileName}
                      </Button>
                    </div>
                  )}
                </div>
              </div>
            ))}
            {isLoading && (
              <div className="flex justify-start">
                <div className="bg-white border rounded-2xl rounded-bl-md px-4 py-3 shadow-sm">
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                    <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}
      </div>

      {/* Enhanced Input Area */}
      <div className="border-t border-gray-200 bg-white/90 backdrop-blur-sm">
        <div className="max-w-4xl mx-auto px-6 py-4">
          <div className="mb-3 flex gap-2 items-center">
            <Button
              variant={useTextEditor ? "default" : "ghost"}
              size="sm"
              onClick={() => setUseTextEditor(!useTextEditor)}
              className="text-xs"
            >
              {useTextEditor ? "Simple Mode" : "Rich Editor"}
            </Button>
          </div>
          
          <div className="relative bg-white rounded-3xl border-2 border-gray-200 focus-within:border-blue-400 focus-within:shadow-lg transition-all duration-200">
            <div className="flex items-end gap-3 p-4">
              <div className="flex gap-2">
                <Button variant="ghost" size="sm" className="text-gray-500 hover:text-gray-700 hover:bg-gray-100">
                  <Paperclip className="w-4 h-4" />
                </Button>
                <PhotoSelector 
                  onImageSelect={handleImageSelect}
                  onImageGenerate={handleImageGenerate}
                />
              </div>
              
              <div className="flex-1">
                {useTextEditor ? (
                  <TextEditor
                    value={message}
                    onChange={setMessage}
                    placeholder="Write with rich formatting... Try: **bold**, *italic*, `code`"
                  />
                ) : (
                  <input
                    value={message}
                    onChange={(e) => setMessage(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder="Ask me anything! I can format text, generate images, create files, and more..."
                    disabled={isLoading}
                    className="w-full border-0 bg-transparent focus:ring-0 text-gray-900 placeholder-gray-500 outline-none text-lg"
                  />
                )}
              </div>
              
              <div className="flex gap-2">
                <Button variant="ghost" size="sm" className="text-gray-500 hover:text-gray-700 hover:bg-gray-100">
                  <Mic className="w-4 h-4" />
                </Button>
                <Button 
                  onClick={handleSendMessage}
                  disabled={!message.trim() || isLoading}
                  size="sm" 
                  className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white rounded-full p-3 disabled:opacity-50 disabled:cursor-not-allowed shadow-lg transition-all duration-200"
                >
                  <Send className="w-4 h-4" />
                </Button>
              </div>
            </div>
          </div>
          
          <p className="text-xs text-gray-500 text-center mt-3">
            <strong>CrazeGPT</strong> ‚Ä¢ Created by CraftingCrazeGaming ‚Ä¢ Powered by Gemini AI
          </p>
        </div>
      </div>
    </div>
  );
};

export default ChatArea;
